// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "OpenSVC SAS",
            "url": "https://www.opensvc.com",
            "email": "collector-api-contact@opensvc.com"
        },
        "license": {
            "name": "Apache License 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/nodes": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List nodes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "properties to include, and optionally remap (comma separated)",
                        "name": "props",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "properties to group by (comma separated)",
                        "name": "groupby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "properties to order by (comma separated, prefix with '~' to reverse)",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "property value filter (a, !a, a\u0026b, a|b, (a,b),  a%,  a%\u0026!ab%)",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of objets to include in response",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset of the first objet to include in response",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "turn off metadata in response",
                        "name": "meta",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.TableResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "The app code of the nodes is forced to one the user is responsible of.\nThe team responsible of the nodes defaults to the user's primary group.\nThe user must be in the NodeManager privilege group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Create or update nodes",
                "parameters": [
                    {
                        "description": "list of nodes to create or update",
                        "name": "nodes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Node"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Node"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/nodes/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Show a node by index, id or name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Show a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the index of the entry in database, or uuid, or name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Node"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "main.Node": {
            "type": "object",
            "properties": {
                "action_type": {
                    "type": "string"
                },
                "app": {
                    "type": "string"
                },
                "asset_env": {
                    "type": "string"
                },
                "assetname": {
                    "type": "string"
                },
                "bios_version": {
                    "type": "string"
                },
                "cluster_id": {
                    "type": "string"
                },
                "collector": {
                    "type": "string"
                },
                "connect_to": {
                    "type": "string"
                },
                "cpu_cores": {
                    "type": "integer"
                },
                "cpu_dies": {
                    "type": "integer"
                },
                "cpu_freq": {
                    "type": "integer"
                },
                "cpu_model": {
                    "type": "string"
                },
                "cpu_threads": {
                    "type": "integer"
                },
                "cpu_vendor": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "enclosure": {
                    "type": "string"
                },
                "enclosureslot": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "hv": {
                    "type": "string"
                },
                "hvpool": {
                    "type": "string"
                },
                "hvvdc": {
                    "type": "string"
                },
                "hw_obs_alert_date": {
                    "type": "string"
                },
                "hw_obs_warn_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_boot": {
                    "type": "string"
                },
                "last_comm": {
                    "type": "string"
                },
                "listener_port": {
                    "type": "integer"
                },
                "loc_addr": {
                    "type": "string"
                },
                "loc_building": {
                    "type": "string"
                },
                "loc_city": {
                    "type": "string"
                },
                "loc_country": {
                    "type": "string"
                },
                "loc_floor": {
                    "type": "string"
                },
                "loc_rack": {
                    "type": "string"
                },
                "loc_room": {
                    "type": "string"
                },
                "loc_zip": {
                    "type": "string"
                },
                "maintenance_end": {
                    "type": "string"
                },
                "manufacturer": {
                    "type": "string"
                },
                "mem_banks": {
                    "type": "integer"
                },
                "mem_bytes": {
                    "type": "integer"
                },
                "mem_slots": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "node_env": {
                    "type": "string"
                },
                "node_frozen": {
                    "type": "boolean"
                },
                "node_id": {
                    "type": "string"
                },
                "nodename": {
                    "type": "string"
                },
                "notifications": {
                    "type": "boolean"
                },
                "os_arch": {
                    "type": "string"
                },
                "os_concat": {
                    "type": "string"
                },
                "os_kernel": {
                    "type": "string"
                },
                "os_name": {
                    "type": "string"
                },
                "os_obs_alert_date": {
                    "type": "string"
                },
                "os_obs_warn_date": {
                    "type": "string"
                },
                "os_release": {
                    "type": "string"
                },
                "os_vendor": {
                    "type": "string"
                },
                "power_breaker1": {
                    "type": "string"
                },
                "power_breaker2": {
                    "type": "string"
                },
                "power_cabinet1": {
                    "type": "string"
                },
                "power_cabinet2": {
                    "type": "string"
                },
                "power_protect": {
                    "type": "string"
                },
                "power_protect_breaker": {
                    "type": "string"
                },
                "power_supply_nb": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "sec_zone": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "snooze_till": {
                    "type": "string"
                },
                "sp_version": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "team_integ": {
                    "type": "string"
                },
                "team_responsible": {
                    "type": "string"
                },
                "team_support": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "tz": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "warranty_end": {
                    "type": "string"
                }
            }
        },
        "main.TableResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "meta": {
                    "$ref": "#/definitions/main.tableResponseMeta"
                }
            }
        },
        "main.property": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "remap": {
                    "type": "string"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "main.tableResponseMeta": {
            "type": "object",
            "properties": {
                "available_props": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.property"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "included_props": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.property"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "OpenSVC collector API",
	Description: "Organization clusters, nodes, services and more.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
